<h1>
    <%= hack.title %>
</h1>
<% hack.description.forEach(function(line) { %>
    <p>
        <%= line %>
    </p>
    <% }); %>

        <div class="patch-section">
            <h2>üéÆ Apply Patch Online</h2>

            <!-- File Drop Zone -->
            <div id="dropzone" class="drop-zone">
                <div class="drop-zone-content">
                    <i class="drop-icon">üë®üèΩ‚Äçüíª</i>
                    <p class="drop-text">Drop your ROM file here</p>
                    <p class="drop-subtext">Expected SHA-1: <%= hack.hash %>
                    </p>
                    <input type="file" id="fileInput" class="file-input" accept="*/*">
                </div>
                <div class="drop-zone-overlay" id="dropOverlay">
                    <p>Drop your ROM here</p>
                </div>
            </div>

            <!-- Optional Addendum Patches -->
            <% if (hack.addendums && hack.addendums.length> 0) { %>
                <div class="addendum-section">
                    <h3>üìã Optional Patches</h3>
                    <p>Select additional patches to apply (these will be applied after the main patch):</p>
                    <div class="addendum-list">
                        <% hack.addendums.forEach(function(addendum, index) { %>
                            <label class="addendum-item">
                                <input type="checkbox" id="addendum-<%= index %>" name="addendum"
                                    value="<%= addendum %>">
                                <span class="addendum-name">
                                    <%= addendum.replace(/\.ips$|_Addendum\.ips$/i, '' ).replace(/_/g, ' ' ) %>
                                </span>
                            </label>
                            <% }); %>
                    </div>
                </div>
                <% } %>

                    <!-- Status Display -->
                    <div id="statusInfo" class="status-info" style="display: none;">
                        <h3 id="statusTitle">Processing...</h3>
                        <p id="statusMessage">Analyzing ROM file...</p>
                        <div id="progressBar" class="progress-bar">
                            <div id="progressFill" class="progress-fill"></div>
                        </div>
                    </div>

                    <!-- Hash Mismatch Error -->
                    <div id="hashError" class="error-message" style="display: none;">
                        <h3>‚ùå ROM Hash Mismatch</h3>
                        <p><strong>Expected:</strong> <span id="expectedHash">
                                <%= hack.hash %>
                            </span></p>
                        <p><strong>Found:</strong> <span id="foundHash"></span></p>
                        <p>This patch is designed for a specific ROM version. Please ensure you have the correct ROM
                            file.</p>
                    </div>

                    <!-- Success Message -->
                    <div id="successMessage" class="success-message" style="display: none;">
                        <h3>‚úÖ Patch Applied Successfully!</h3>
                        <p>Your ROM has been patched and is ready for download.</p>
                        <button id="downloadBtn" class="download-btn">Download Patched ROM</button>
                    </div>
        </div>
        <script src="/dist/RomPatcher.js"></script>
        <script src="/dist/modules/BinFile.js"></script>
        <script src="/dist/modules/HashCalculator.js"></script>
        <script src="/dist/modules/RomPatcher.format.ips.js"></script>
        <script>
            document.addEventListener('DOMContentLoaded', function () {
                const dropzone = document.getElementById('dropzone');
                const fileInput = document.getElementById('fileInput');
                const dropOverlay = document.getElementById('dropOverlay');
                const statusInfo = document.getElementById('statusInfo');
                const statusTitle = document.getElementById('statusTitle');
                const statusMessage = document.getElementById('statusMessage');
                const progressBar = document.getElementById('progressFill');
                const hashError = document.getElementById('hashError');
                const foundHash = document.getElementById('foundHash');
                const successMessage = document.getElementById('successMessage');
                const downloadBtn = document.getElementById('downloadBtn');

                const expectedHash = '<%= hack.hash %>';
                let patchedRomBlob = null;
                let dragCounter = 0;

                // Prevent default drag behaviors
                ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
                    dropzone.addEventListener(eventName, preventDefaults, false);
                    document.body.addEventListener(eventName, preventDefaults, false);
                });

                // Handle drag events
                dropzone.addEventListener('dragenter', function (e) {
                    preventDefaults(e);
                    dragCounter++;
                    highlight();
                });

                dropzone.addEventListener('dragleave', function (e) {
                    preventDefaults(e);
                    dragCounter--;
                    if (dragCounter === 0) {
                        unhighlight();
                    }
                });

                dropzone.addEventListener('dragover', function (e) {
                    preventDefaults(e);
                });

                dropzone.addEventListener('drop', function (e) {
                    preventDefaults(e);
                    dragCounter = 0;
                    unhighlight();
                    const files = e.dataTransfer.files;
                    handleFiles(files);
                });

                fileInput.addEventListener('change', function (e) {
                    handleFiles(e.target.files);
                });

                dropzone.addEventListener('click', function () {
                    fileInput.click();
                });

                downloadBtn.addEventListener('click', function () {
                    if (patchedRomBlob) {
                        patchedRomBlob.save();
                    }
                });

                function preventDefaults(e) {
                    e.preventDefault();
                    e.stopPropagation();
                }

                function highlight() {
                    dropzone.classList.add('drag-over');
                    dropOverlay.style.display = 'flex';
                }

                function unhighlight() {
                    dropzone.classList.remove('drag-over');
                    dropOverlay.style.display = 'none';
                }

                function hideAllMessages() {
                    statusInfo.style.display = 'none';
                    hashError.style.display = 'none';
                    successMessage.style.display = 'none';
                }

                function updateProgress(percent, message) {
                    progressBar.style.width = percent + '%';
                    statusMessage.textContent = message;
                }

                async function handleFiles(files) {
                    if (files.length === 0) return;

                    hideAllMessages();
                    const file = files[0];

                    // Show status
                    statusInfo.style.display = 'block';
                    statusTitle.textContent = 'Processing ROM...';
                    updateProgress(10, 'Reading ROM file...');

                    try {
                        // Calculate ROM hash using built utility
                        updateProgress(30, 'Calculating SHA-1 hash...');
                        const romHash = await App.utils.calculateSHA1(file);

                        // Check if hash matches
                        updateProgress(50, 'Verifying ROM...');
                        if (romHash !== expectedHash) {
                            foundHash.textContent = romHash;
                            hideAllMessages();
                            hashError.style.display = 'block';
                            return;
                        }

                        // Hash matches, apply patch
                        updateProgress(70, 'Applying patch...');

                        patchedRomBlob = await applyPatch(file);

                        updateProgress(100, 'Patch applied successfully!');

                        setTimeout(() => {
                            hideAllMessages();
                            successMessage.style.display = 'block';
                        }, 500);

                    } catch (error) {
                        console.error('Error processing ROM:', error);
                        hideAllMessages();
                        statusInfo.style.display = 'block';
                        statusTitle.textContent = 'Error';
                        statusMessage.textContent = 'Failed to process ROM: ' + error.message;
                    }
                }

                async function applyPatch(romFile) {
                    // Fetch the main patch file
                    const patchResponse = await fetch('/data/hack/<%= locals.hackId %>/patch.ips');
                    if (!patchResponse.ok) {
                        throw new Error('Failed to load patch file');
                    }

                    const patchData = await patchResponse.arrayBuffer();

                    // Convert File to BinFile format expected by the library
                    const romArrayBuffer = await romFile.arrayBuffer();
                    let romBinFile = new BinFile(romArrayBuffer);
                    romBinFile.fileName = romFile.name;

                    // Apply main patch
                    const mainPatch = RomPatcher.parsePatchFile(new BinFile(patchData));

                    try {
                        romBinFile = RomPatcher.applyPatch(romBinFile, mainPatch);

                        // Get selected addendum patches
                        const selectedAddendums = getSelectedAddendums();

                        // Apply each selected addendum patch
                        for (let i = 0; i < selectedAddendums.length; i++) {
                            updateProgress(70 + (i + 1) * (20 / (selectedAddendums.length + 1)),
                                `Applying addendum: ${selectedAddendums[i]}...`);

                            const addendumResponse = await fetch(`/data/hack/<%= locals.hackId %>/${selectedAddendums[i]}`);
                            if (!addendumResponse.ok) {
                                console.warn(`Failed to load addendum patch: ${selectedAddendums[i]}`);
                                continue;
                            }

                            const addendumData = await addendumResponse.arrayBuffer();
                            const addendumPatch = RomPatcher.parsePatchFile(new BinFile(addendumData));
                            romBinFile = RomPatcher.applyPatch(romBinFile, addendumPatch);
                        }
                        romBinFile.setName("<%= hack.fileName %>");

                        return romBinFile;
                    } catch (error) {
                        throw new Error('Patch application failed: ' + error.message);
                    }
                }

                function getSelectedAddendums() {
                    const checkboxes = document.querySelectorAll('input[name="addendum"]:checked');
                    return Array.from(checkboxes).map(cb => cb.value);
                }
            });
        </script>